{"version":3,"file":"subscribeWithSelector-C_IeYp1L.cjs","sources":["../src/middleware/subscribeWithSelector.ts"],"sourcesContent":["import type { StateCreator, StoreMutatorIdentifier } from '../vanilla.ts'\r\n\r\ntype SubscribeWithSelector = <\r\n    T,\r\n    Mps extends [StoreMutatorIdentifier, unknown][] = [],\r\n    Mcs extends [StoreMutatorIdentifier, unknown][] = []\r\n>(\r\n    initializer: StateCreator<T, [...Mps, ['zustand/subscribeWithSelector', never]], Mcs>\r\n) => StateCreator<T, Mps, [['zustand/subscribeWithSelector', never], ...Mcs]>\r\n\r\ntype Write<T, U> = Omit<T, keyof U> & U\r\n\r\ntype WithSelectorSubscribe<S> = S extends { getState: () => infer T } ? Write<S, StoreSubscribeWithSelector<T>> : never\r\n\r\ndeclare module '../vanilla' {\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    interface StoreMutators<S, A> {\r\n        ['zustand/subscribeWithSelector']: WithSelectorSubscribe<S>\r\n    }\r\n}\r\n\r\ntype StoreSubscribeWithSelector<T> = {\r\n    subscribe: {\r\n        (listener: (selectedState: T, previousSelectedState: T) => void): () => void\r\n        <U>(\r\n            selector: (state: T) => U,\r\n            listener: (selectedState: U, previousSelectedState: U) => void,\r\n            options?: {\r\n                equalityFn?: (a: U, b: U) => boolean\r\n                fireImmediately?: boolean\r\n            }\r\n        ): () => void\r\n    }\r\n}\r\n\r\ntype SubscribeWithSelectorImpl = <T extends object>(\r\n    storeInitializer: StateCreator<T, [], []>\r\n) => StateCreator<T, [], []>\r\n\r\nconst subscribeWithSelectorImpl: SubscribeWithSelectorImpl = (fn) => (set, get, api) => {\r\n    type S = ReturnType<typeof fn>\r\n    type Listener = (state: S, previousState: S) => void\r\n    const origSubscribe = api.subscribe as (listener: Listener) => () => void\r\n    api.subscribe = ((selector: any, optListener: any, options: any) => {\r\n        let listener: Listener = selector // if no selector\r\n        if (optListener) {\r\n            const equalityFn = options?.equalityFn || Object.is\r\n            let currentSlice = selector(api.getState())\r\n            listener = (state) => {\r\n                const nextSlice = selector(state)\r\n                if (!equalityFn(currentSlice, nextSlice)) {\r\n                    const previousSlice = currentSlice\r\n                    optListener((currentSlice = nextSlice), previousSlice)\r\n                }\r\n            }\r\n            if (options?.fireImmediately) {\r\n                optListener(currentSlice, currentSlice)\r\n            }\r\n        }\r\n        return origSubscribe(listener)\r\n    }) as any\r\n    const initialState = fn(set, get, api)\r\n    return initialState\r\n}\r\nexport const subscribeWithSelector = subscribeWithSelectorImpl as unknown as SubscribeWithSelector\r\n"],"names":[],"mappings":";AAuCA,MAAM,4BAAuD,CAAC,OAAO,CAAC,KAAK,KAAK,QAAQ;AAGpF,QAAM,gBAAgB,IAAI;AAC1B,MAAI,aAAa,CAAC,UAAe,aAAkB,YAAiB;AAChE,QAAI,WAAqB;AACzB,QAAI,aAAa;AACb,YAAM,aAAa,SAAS,cAAc,OAAO;AACjD,UAAI,eAAe,SAAS,IAAI,SAAA,CAAU;AAC1C,iBAAW,CAAC,UAAU;AAClB,cAAM,YAAY,SAAS,KAAK;AAChC,YAAI,CAAC,WAAW,cAAc,SAAS,GAAG;AACtC,gBAAM,gBAAgB;AACtB,sBAAa,eAAe,WAAY,aAAa;AAAA,QACzD;AAAA,MACJ;AACA,UAAI,SAAS,iBAAiB;AAC1B,oBAAY,cAAc,YAAY;AAAA,MAC1C;AAAA,IACJ;AACA,WAAO,cAAc,QAAQ;AAAA,EACjC;AACA,QAAM,eAAe,GAAG,KAAK,KAAK,GAAG;AACrC,SAAO;AACX;AACO,MAAM,wBAAwB;;"}